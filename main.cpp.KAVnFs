#include <iostream>
#include <nlohmann/json.hpp>
#include <string>
#include <gd.h>
#include <curlpp/cURLpp.hpp>
#include <curlpp/Easy.hpp>
#include <curlpp/Options.hpp>

using namespace std;
using json = nlohmann::json;
using namespace nlohmann::literals;
using namespace curlpp::options;

int main(int, char**)
{

    // https://github.com/datacratic/curlpp/blob/master/examples/example00.cpp
    try
    {
        // That's all that is needed to do cleanup of used resources (RAII style).
        curlpp::Cleanup myCleanup;

        // Our request to be sent.
        curlpp::Easy myRequest;

        // Set the URL.
        myRequest.setOpt<Url>("http://example.com");

        // Send request and get a result.
        // By default the result goes to standard output.
        myRequest.perform();
    }

    catch(curlpp::RuntimeError & e)
    {
        std::cout << e.what() << std::endl;
    }

    catch(curlpp::LogicError & e)
    {
        std::cout << e.what() << std::endl;
    }


    string url = "http://hubeau.eaufrance.fr/api/v1/hydrometrie/";

    // En dur en attendant la requête
    string dataStr = R"({"date_obs":"2023-09-14T13:30:00Z","resultat_obs":750.0})";
    auto j = json::parse(dataStr);
    auto h = j.at("resultat_obs");
    cout << "Resultat obs = " << h << endl;

    // Libgd
    gdImagePtr im;
    FILE *pngout;

    int imgsize = 550;
    int bckgrd, noir, bleu; // Noms des couleurs

    im = gdImageCreate(imgsize, imgsize); //création de l'image

    bckgrd = gdImageColorAllocate(im, 240, 240, 255); // background
    noir =   gdImageColorAllocate(im, 0, 0, 0);
    bleu =    gdImageColorAllocate(im, 10,   50, 255);

    gdImageFilledRectangle(im,0,0,100,100,bleu);

    pngout = fopen("titre", "wb");
    gdImagePng(im, pngout);
    fclose(pngout);
    gdImageDestroy(im);

    return 0;
}
